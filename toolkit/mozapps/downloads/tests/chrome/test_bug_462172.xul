<?xml version="1.0"?>
<!-- This Source Code Form is subject to the terms of the Mozilla Public
   - License, v. 2.0. If a copy of the MPL was not distributed with this
   - file, You can obtain one at http://mozilla.org/MPL/2.0/.  -->
<!--
 * Assure download manager can load valid list item as
 * "application/moz-x-file"

https://bugzilla.mozilla.org/show_bug.cgi?id=462172

create a file with unique name
create another file with unique name and delete it
load into downloads database
open download manager
synthesize drag on both files
missing file should not init drag
real file should return transferdata with application/x-moz-file
close window

-->
<window title="Mozilla Bug 462172"
        xmlns="http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul"
        onload="test();">
  <script type="application/javascript"
          src="chrome://mochikit/content/tests/SimpleTest/SimpleTest.js"/>
  <script type="application/javascript"
          src="utils.js"/>
  <script type="application/javascript"
          src="chrome://mochikit/content/tests/SimpleTest/EventUtils.js"></script>
  <script type="application/javascript"
          src="chrome://mochikit/content/tests/SimpleTest/ChromeUtils.js"></script>
  <script type="application/javascript">
  <![CDATA[

  /** Test for Bug 462172 **/
var missingFileElid;
var realFileElid;
const kFiller = "notApplicable";
const kFillerURL = "https://bugzilla.mozilla.org/show_bug.cgi?id=462172"
var realFile = Cc["@mozilla.org/file/directory_service;1"].
                  getService(Ci.nsIProperties).get("CurWorkD", Ci.nsIFile);
var missingFile = Cc["@mozilla.org/file/directory_service;1"].
                     getService(Ci.nsIProperties).get("CurWorkD", Ci.nsIFile);

var ios = Cc["@mozilla.org/network/io-service;1"].getService(Ci.nsIIOService);

realFile.append(kFiller);
realFile.createUnique(Ci.nsIFile.NORMAL_FILE_TYPE, 0666);
var realFilePath = ios.newFileURI(realFile).spec;

missingFile.append(kFiller);
missingFile.createUnique(Ci.nsIFile.NORMAL_FILE_TYPE, 0666);
var missingFilePath = ios.newFileURI(missingFile).spec;
missingFile.remove(false);

// Dummy data for our files.
// 'source' field must be in form of an URL.
const DownloadData = [
  { name: kFiller,
    source: kFillerURL,
    target: realFilePath,
    state: Ci.nsIDownloadManager.DOWNLOAD_FINISHED},
  { name: kFiller,
    source: kFillerURL,
    target: missingFilePath,
    state: Ci.nsIDownloadManager.DOWNLOAD_FINISHED}
];

function compareStrFunc(actualData, expectedData) {
  return expectedData === actualData;
}

function compareFunc(actualData, expectedData) {
  return expectedData.equals(actualData);
}

var dragRealFile = [[
  { type  :"application/x-moz-file",
    data  : realFile,
    eqTest  : compareFunc },
  { type  : "text/uri-list",
    data  : realFilePath,
    eqTest  : compareStrFunc },
  { type  : "text/plain",
    data  : realFilePath,
    eqTest  : compareStrFunc }
]];
var dragMissingFile = [[
  { type  :"application/x-moz-file",
    data  : missingFile,
    eqTest  : compareFunc },
  { type  : "text/uri-list",
    data  : missingFilePath,
    eqTest  : compareStrFunc },
  { type  : "text/plain",
    data  : missingFilePath,
    eqTest  : compareStrFunc }
]];

function test() {

  var dmui = getDMUI();
  if (!dmui) {
    todo(false, "skip test for toolkit download manager UI");
    return;
  }

  // load files into db
  var dm = Cc["@mozilla.org/download-manager;1"].
           getService(Ci.nsIDownloadManager);
  var db = dm.DBConnection;

  var stmt = db.createStatement(
    "INSERT INTO moz_downloads ( name,  source,  target,  state)" +
    "VALUES                    (:name, :source, :target, :state)");
  for (var dl of DownloadData) {
    for (var prop in dl)
      stmt.params[prop] = dl[prop];
    stmt.execute();
    if (dl.target == missingFilePath)
      missingFileElid = "dl" + db.lastInsertRowID;
    else if (dl.target == realFilePath)
      realFileElid = "dl" + db.lastInsertRowID;
  }
  stmt.finalize();

  // See if the DM is already open, and if it is, close it!
  var win = getDMWindow();
  if (win) win.close();

  var os = Cc["@mozilla.org/observer-service;1"].
           getService(Ci.nsIObserverService);
  const DLMGR_UI_DONE = "download-manager-ui-done";

  var testObs = {
    observe: function(aSubject, aTopic, aData) {
      if (aTopic != DLMGR_UI_DONE)
        return;

      var win = aSubject.QueryInterface(Ci.nsIDOMWindow);
      win.focus();

      // Now we can run our tests
      var result = synthesizeDragStart(win.document.getElementById(realFileElid), dragRealFile, win);
      is(result, null, "Checking for Real file match");
      result = synthesizeDragStart(win.document.getElementById(missingFileElid), dragMissingFile, win);
      isnot(result, null, "Drag start did not return item for missing file");

      // Done.
      win.close();
      realFile.remove(false);
      os.removeObserver(testObs, DLMGR_UI_DONE);
      SimpleTest.finish();
    }
  };

  // Register with the observer service
  os.addObserver(testObs, DLMGR_UI_DONE, false);

  // Show the Download Manager UI
  dmui.show();

  SimpleTest.waitForExplicitFinish();
}

  ]]>
  </script>

  <body xmlns="http://www.w3.org/1999/xhtml">
    <p id="display"></p>
    <div id="content" style="display:none;"></div>
    <pre id="test"></pre>
  </body>
</window>
