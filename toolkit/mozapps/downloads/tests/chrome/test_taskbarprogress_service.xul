<?xml version="1.0"?>
<!-- This Source Code Form is subject to the terms of the Mozilla Public
   - License, v. 2.0. If a copy of the MPL was not distributed with this
   - file, You can obtain one at http://mozilla.org/MPL/2.0/.  -->
<!--
 * This tests that the Windows 7 Taskbar Progress is correctly updated when
 * windows are opened and closed.
-->

<window title="Win7 Taskbar Progress"
        xmlns="http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul"
        onload="test();">

  <script type="application/javascript"
          src="chrome://mochikit/content/tests/SimpleTest/SimpleTest.js"/>
  <script type="application/javascript"
          src="utils.js"/>

  <script type="application/javascript">
  <![CDATA[

const kTaskbarID = "@mozilla.org/windows-taskbar;1";
const DOWNLOAD_MANAGER_URL = "chrome://mozapps/content/downloads/downloads.xul";
const DLMGR_UI_DONE = "download-manager-ui-done";

Components.utils.import("resource://gre/modules/Services.jsm");

let DownloadTaskbarProgress, TaskbarService, observerService, wwatch, chromeWindow;
let gGen = null;

function test() {
  var dmui = getDMUI();
  if (!dmui) {
    todo(false, "skip test for toolkit download manager UI");
    return;
  }

  let isWin7OrHigher = false;
  try {
    let version = Cc["@mozilla.org/system-info;1"]
                    .getService(Ci.nsIPropertyBag2)
                    .getProperty("version");
    isWin7OrHigher = (parseFloat(version) >= 6.1);
  } catch (ex) { }

  if (!isWin7OrHigher) {
    ok(true, "This test only runs on Windows 7 or higher");
    return;
  }

  SimpleTest.waitForExplicitFinish();
  gGen = doTest();
  gGen.next();
}

function continueTest() {
  gGen.next();
}

function doTest() {
  // Ensure that the download manager callbacks always use the window UI instead
  // of the panel in the browser's window.
  Services.prefs.setBoolPref("browser.download.useToolkitUI", true);

  let tempScope = {};
  Components.utils.import("resource://gre/modules/DownloadTaskbarProgress.jsm", tempScope);

  DownloadTaskbarProgress = tempScope.DownloadTaskbarProgress;
  TaskbarService =  Cc[kTaskbarID].getService(Ci.nsIWinTaskbar);

  observerService = Cc["@mozilla.org/observer-service;1"].
                      getService(Ci.nsIObserverService);

  wwatch = Cc["@mozilla.org/embedcomp/window-watcher;1"].
             getService(Ci.nsIWindowWatcher);

  isnot(DownloadTaskbarProgress, null, "Download taskbar progress service exists");
  is(TaskbarService.available, true, "Taskbar Service is available");

  let DMWindow = getDMWindow();
  if (DMWindow)
    DMWindow.close();

  //Manually call onBrowserWindowLoad because this is delayed in 10sec
  chromeWindow = window.QueryInterface(Components.interfaces.nsIInterfaceRequestor).
                   getInterface(Components.interfaces.nsIWebNavigation).
                   QueryInterface(Components.interfaces.nsIDocShellTreeItem).
                   rootTreeItem.
                   QueryInterface(Components.interfaces.nsIInterfaceRequestor).
                   getInterface(Components.interfaces.nsIDOMWindow);

  DownloadTaskbarProgress.onBrowserWindowLoad(chromeWindow);

  is(DownloadTaskbarProgress.activeWindowIsDownloadWindow, false,
     "DownloadTaskbarProgress window is not the Download window");

  checkActiveTaskbar(false, window);
  openDownloadManager(continueTest);
  yield;

  let DMWindow = getDMWindow();

  ok(DMWindow, "Download Manager window was opened");
  checkActiveTaskbar(true, DMWindow);

  DMWindow.close();
  setTimeout(continueTest, 100);
  yield;

  checkActiveTaskbar(false, window);

  let browserWindow = openBrowserWindow(continueTest);
  yield;

  ok(browserWindow, "Browser window was opened");
  DownloadTaskbarProgress.onBrowserWindowLoad(browserWindow);

  // The owner window should not have changed, since our
  // original window still exists
  checkActiveTaskbar(false, window);

  Services.prefs.clearUserPref("browser.download.useToolkitUI");

  browserWindow.close();
  SimpleTest.finish();
  yield;
}

function checkActiveTaskbar(isDownloadManager, ownerWindow) {

  isnot(DownloadTaskbarProgress.activeTaskbarProgress, null, "DownloadTaskbarProgress has an active taskbar");

  is(DownloadTaskbarProgress.activeWindowIsDownloadWindow, isDownloadManager,
     "The active taskbar progress " + (isDownloadManager ? "is" : "is not") + " the Download Manager");

  if (ownerWindow) {
    let ownerWindowDocShell = ownerWindow.QueryInterface(Ci.nsIInterfaceRequestor).
                                getInterface(Ci.nsIWebNavigation).
                                QueryInterface(Ci.nsIDocShellTreeItem).treeOwner.
                                QueryInterface(Ci.nsIInterfaceRequestor).
                                getInterface(Ci.nsIXULWindow).docShell;

    let windowTaskbarProgress = TaskbarService.getTaskbarProgress(ownerWindowDocShell);

    is(DownloadTaskbarProgress.activeTaskbarProgress, windowTaskbarProgress,
       "DownloadTaskbarProgress has the expected taskbar as active");
  }

}

function openBrowserWindow(callback) {

  let browserWindow = openDialog(chromeWindow.location, "_blank",
                                 "chrome,all,dialog=no", "about:blank");
 
  let helperFunc = function() {
    callback();
    browserWindow.removeEventListener("load", helperFunc, false);
  }

  browserWindow.addEventListener("load", helperFunc, false);

  return browserWindow;
}

function openDownloadManager(callback) {

  let testObs = {
    observe: function(aSubject, aTopic, aData) {
      if (aTopic != DLMGR_UI_DONE) {
        return;
      }

      callback();
      observerService.removeObserver(testObs, DLMGR_UI_DONE);
    }
  };

  observerService.addObserver(testObs, DLMGR_UI_DONE, false);

  Cc["@mozilla.org/download-manager-ui;1"].
    getService(Ci.nsIDownloadManagerUI).show();

}
  ]]>
  </script>

  <body xmlns="http://www.w3.org/1999/xhtml">
    <p id="display"></p>
    <div id="content" style="display:none;"></div>
    <pre id="test"></pre>
  </body>
</window>
