/* vim: se cin sw=2 ts=2 et : */
/* -*- Mode: C++; tab-width: 2; indent-tabs-mode: nil; c-basic-offset: 2 -*-
 *
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/. */

#include "nsISupports.idl"

interface nsIDocShell;
interface nsITaskbarPreview;
interface nsITaskbarPreviewButton;

/**
 * nsITaskbarPreviewController
 *
 * nsITaskbarPreviewController provides the behavior for the taskbar previews.
 * Its methods and properties are used by nsITaskbarPreview. Clients are
 * intended to provide their own implementation of this interface. Depending on
 * the interface the controller is attached to, only certain methods/attributes
 * are required to be implemented.
 */
[scriptable, uuid(4FC0AFBB-3E22-4FBA-AC21-953350AF0411)]
interface nsITaskbarPreviewController : nsISupports
{
  /**
   * The width of the preview image. This value is allowed to change at any
   * time. See drawPreview for more information.
   */
  readonly attribute unsigned long width;

  /**
   * The height of the preview image. This value is allowed to change at any
   * time.  See drawPreview for more information.
   */
  readonly attribute unsigned long height;

  /**
   * The aspect ratio of the thumbnail - this does not need to match the ratio
   * of the preview. This value is allowed to change at any time. See
   * drawThumbnail for more information.
   */
  readonly attribute float thumbnailAspectRatio;

  /**
   * Invoked by nsITaskbarPreview when it needs to render the preview. The
   * context is attached to a surface with the controller's width and height
   * which are obtained immediately before the call.
   *
   * Note that the context is not attached to a canvas element.
   *
   * @param ctx Canvas drawing context
   */
  boolean drawPreview(in nsISupports ctx);

  /**
   * Invoked by the taskbar preview when it needs to draw the thumbnail in the
   * taskbar's application preview window.
   *
   * Note: it is guaranteed that width/height == thumbnailAspectRatio
   * (modulo rounding errors)
   *
   * Also note that the context is not attached to a canvas element.
   *
   * @param ctx Canvas drawing context
   * @param width The width of the surface backing the drawing context
   * @param height The height of the surface backing the drawing context
   */
  boolean drawThumbnail(in nsISupports ctx, in unsigned long width, in unsigned long height);

  /**
   * Invoked when the user presses the close button on the tab preview.
   */
  void onClose();

  /**
   * Invoked when the user clicks on the tab preview.
   *
   * @return true if the top level window corresponding to the preview should
   *         be activated, false if activation is not accepted.
   */
  boolean onActivate();

  /**
   * Invoked when one of the buttons on the window preview's toolbar is pressed.
   *
   * @param button The button that was pressed. This can be compared with the
   *               buttons returned by nsITaskbarWindowPreview.getButton.
   */
  void onClick(in nsITaskbarPreviewButton button);
};

